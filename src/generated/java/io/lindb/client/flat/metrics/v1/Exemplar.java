// automatically generated by the FlatBuffers compiler, do not modify

package io.lindb.client.flat.metrics.v1;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@javax.annotation.Generated(value="flatc")
@SuppressWarnings("unused")
public final class Exemplar extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static Exemplar getRootAsExemplar(ByteBuffer _bb) { return getRootAsExemplar(_bb, new Exemplar()); }
  public static Exemplar getRootAsExemplar(ByteBuffer _bb, Exemplar obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Exemplar __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String spanId() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer spanIdAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer spanIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String traceId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer traceIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer traceIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public long duration() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createExemplar(FlatBufferBuilder builder,
      int nameOffset,
      int spanIdOffset,
      int traceIdOffset,
      long duration) {
    builder.startTable(4);
    Exemplar.addDuration(builder, duration);
    Exemplar.addTraceId(builder, traceIdOffset);
    Exemplar.addSpanId(builder, spanIdOffset);
    Exemplar.addName(builder, nameOffset);
    return Exemplar.endExemplar(builder);
  }

  public static void startExemplar(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addSpanId(FlatBufferBuilder builder, int spanIdOffset) { builder.addOffset(1, spanIdOffset, 0); }
  public static void addTraceId(FlatBufferBuilder builder, int traceIdOffset) { builder.addOffset(2, traceIdOffset, 0); }
  public static void addDuration(FlatBufferBuilder builder, long duration) { builder.addLong(3, duration, 0L); }
  public static int endExemplar(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Exemplar get(int j) { return get(new Exemplar(), j); }
    public Exemplar get(Exemplar obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

